<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>board_white_spr</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>tile_color = 1;
window_set_cursor(cr_none);
curent_board_2D_ar[tile_x, tile_y] = tile_color;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>i = tile_x;
j = tile_y;
curent_board_2D_ar = curent_board_2D_ar
//cheking NW diagonal
while(i &gt; 0 and j &gt; 0){
    i--;
    j--;
    if(curent_board_2D_ar[i,j] == 1 and i+j+2 != tile_x+tile_y){
        //steping back thrue fliping the tiles
        while(i &lt; tile_x and j &lt; tile_y){
            i++;
            j++;
            curent_board_2D_ar[i,j] = 1;
        }
        break;
    }
    else if(curent_board_2D_ar[i,j] == 0 or (curent_board_2D_ar[i,j] == 1 and i+j+2 == tile_x+tile_y)){
        break;
    }
}
i = tile_x;
j = tile_y;
//cheking the N vertical
while(j &gt; 0){
    j--;
    if(curent_board_2D_ar[i,j] == 1 and j+1 != tile_y){
        //steping back thrue fliping the tiles
        while(j &lt; tile_y){
            j++;
            curent_board_2D_ar[i,j] = 1;
        }
        break;
    }
    else if(curent_board_2D_ar[i,j] == 0 or (curent_board_2D_ar[i,j] == 1 and j+1 == tile_y)){
        break;
    }
}
i = tile_x;
j = tile_y;
//cheking NE diagonal
while(i &lt; 7 and j &gt; 0){
    i++;
    j--;
    if(curent_board_2D_ar[i,j] == 1 and i+j != tile_x+tile_y){
        //steping back thrue fliping the tiles
        while(i &gt; tile_x and j &lt; tile_y){
            i--;
            j++;
            curent_board_2D_ar[i,j] = 1;
        }
        break;
    }
    else if(curent_board_2D_ar[i,j] == 0 or (curent_board_2D_ar[i,j] == 1 and i+j == tile_x+tile_y)){
        break;
    }
}
i = tile_x;
j = tile_y;
//cheking the E horazontal
while(i &lt; 7){
    i++;
    if(curent_board_2D_ar[i,j] == 1 and i-1 != tile_x){
        //steping back thrue fliping the tiles
        while(i &gt; tile_x){
            i--;
            curent_board_2D_ar[i,j] = 1;
        }
        break;
    }
    else if(curent_board_2D_ar[i,j] == 0 or (curent_board_2D_ar[i,j] == 1 and i-1 == tile_x)){
        break;
    }
}
i = tile_x;
j = tile_y;
//cheking SE diagonal
while(i &lt; 7 and j &lt; 7){
    i++;
    j++;
    if(curent_board_2D_ar[i,j] == 1 and i+j-2 != tile_x+tile_y){
        //steping back thrue fliping the tiles
        while(i &gt; tile_x and j &gt; tile_y){
            i--;
            j--;
            curent_board_2D_ar[i,j] = 2;
        }
        break;
    }
    else if(curent_board_2D_ar[i,j] == 0 or (curent_board_2D_ar[i,j] == 1 and i+j-2 == tile_x+tile_y)){
        break;
    }
}
i = tile_x;
j = tile_y;
//cheking the S vertical
while(j &lt; 7){
    j++;
    if(curent_board_2D_ar[i,j] == 1 and j-1 != tile_y){
        //steping back thrue fliping the tiles
        while(j &gt; tile_y){
            j--;
            curent_board_2D_ar[i,j] = 1;
        }
        break;
    }
    else if(curent_board_2D_ar[i,j] == 0 or (curent_board_2D_ar[i,j] == 1 and j-1 == tile_y)){
        break;
    }
}
//cheking SW diagonal
while(i &gt; 0 and j &lt; 7){
    i--;
    j++;
    if(curent_board_2D_ar[i,j] == 1 and i+j != tile_x+tile_y){
        //steping back thrue fliping the tiles
        while(i &lt; tile_x and j &gt; tile_y){
            i++;
            j--;
            curent_board_2D_ar[i,j] = 21
        }
        break;
    }
    else if(curent_board_2D_ar[i,j] == 0 or (curent_board_2D_ar[i,j] == 1 and i+j == tile_x+tile_y)){
        break;
    }
}
i = tile_x;
j = tile_y;
//cheking the W horazontal
while(i &gt; 0){
    i--;
    if(curent_board_2D_ar[i,j] == 1 and i+1 != tile_x){
        //steping back thrue fliping the tiles
        while(i &lt; tile_x){
            i++;
            curent_board_2D_ar[i,j] = 1;
        }
        break;
    }
    else if(curent_board_2D_ar[i,j] == 0 or (curent_board_2D_ar[i,j] == 1 and i+1 == tile_x)){
        break;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>601</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_execute_script</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>9</kind>
            <script>move</script>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(tile_color != curent_board_2D_ar[tile_x, tile_y]){
    switch (tile_color){
        case 0:
            instance_create(instance.x, instance.y, board_tile_obj);
        case 1:
            instance_create(instance.x, instance.y, board_white_obj);
        case 2: 
            instance_create(instance.x, instance.y, board_black_obj);
    }
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>-1</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>1</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>16,16</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>
